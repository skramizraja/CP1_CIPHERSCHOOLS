/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int parent(TreeNode* root, int num)
    {
        if(root==NULL)
            return 0;
        if(root->left!=NULL && root->left->val==num)
        {
            
            return root->val;
        }
        if(root->right!=NULL && root->right->val==num)
        {
            
            return root->val;
        }
        int a=parent(root->left,num);
        if(a!=0)
            return a;
        int b=parent(root->right,num);
        if(b!=0)
             return b;
        return 0; 
    }
    int depth(TreeNode* root, int num, int height)
    {
        if(root==NULL)
            return 0;
        if(root->val==num)
            return height;
        int a=depth(root->left,num,height+1);
        if(a!=0)
        {
            cout<<height<<" ";
            return a;
        }
        int b=depth(root->right,num,height+1);
        if(b!=0)
        {
            cout<<height<<" ";
            return b;
        }
        return 0;
            
    }
    bool isCousins(TreeNode* root, int x, int y) {
       if(root==NULL)
           return false;
        int p1=parent(root,x);
        int p2=parent(root,y);
        int d1=depth(root,x,0);
        int d2=depth(root,y,0);
      cout<<p1<<" "<<p2<<" "<<d1<<" "<<d2;
        
        if(p1!=p2 && d1==d2)
            return true;
            else
                return false;
        
    }
};
